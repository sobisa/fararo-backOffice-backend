// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========== USER & AUTH ==========
model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  name     String
  role     String @default("user") // admin, manager, user
  enabled  Int    @default(1) // 0 or 1
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ========== COMPANIES ==========
model Company {
  id          Int        @id @default(autoincrement())
  name        String
  serial      String?
  taxCode     String?
  phone       String?
  address     String?
  description String?
  
  customers   Customer[]
  orders      Order[]     // ✅ اضافه شد
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// ========== CUSTOMERS ==========
model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  mobile      String?
  type        String?
  position    String?
  description String?
  companyId   Int?
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contacts    Contact[]
  orders      Order[]
  calls       Call[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([companyId])
}

// ========== CALLS ==========
model Call {
  id            Int       @id @default(autoincrement())
  customerId    Int
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  subject       String
  referredTo    String?
  description   String?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([customerId])
  @@index([createdAt])
}

// ========== CONTACTS ==========
model Contact {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  title      String
  content    String
  type       String   // call, email, meeting, note
  isNew      Int      @default(1) // 0 or 1
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ========== OPTIONS ==========
model Option {
  id          Int      @id @default(autoincrement())
  title       String
  model       String   // multiState, countable, countableMultiState
  states      String?  // JSON array
  description String?
  isActive    Int      @default(1) // 0 or 1
  
  productOptions          ProductOption[]
  orderItemProductOptions OrderItemProductOption[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ========== PRODUCTS ==========
model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  
  productOptions ProductOption[]
  orderItems     OrderItem[]
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ProductOption {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  optionId  Int
  option    Option  @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  maxNo     Int     @default(1)
  
  orderItemProductOptions OrderItemProductOption[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, optionId])
}

// ========== ORDERS ==========
model Order {
  id          Int      @id @default(autoincrement())
  
  // ✅ تغییر: هر دو nullable شدند
  customerId  Int?
  customer    Customer? @relation(fields: [customerId], references: [id])
  
  companyId   Int?     // ✅ اضافه شد
  company     Company?  @relation(fields: [companyId], references: [id]) // ✅ اضافه شد
  
  description String?
  status      String   @default("open") // open, approved, finished, canceled
  orderTime   Int      // Unix timestamp
  
  createdBy   String
  updatedBy   String?
  
  orderItems  OrderItem[]
  orderHistory OrderHistory[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ✅ اضافه کردن index برای بهبود کارایی
  @@index([customerId])
  @@index([companyId])
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  
  quantity    Int
  description String?
  
  orderItemProductOptions OrderItemProductOption[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItemProductOption {
  id               Int           @id @default(autoincrement())
  orderItemId      Int
  orderItem        OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  
  optionId         Int?
  option           Option?       @relation(fields: [optionId], references: [id])
  
  productOptionId  Int?
  productOption    ProductOption? @relation(fields: [productOptionId], references: [id])
  
  selection        String
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

// ========== ORDER HISTORY ==========
model OrderHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  action    String   // created, updated, status_changed
  changedBy String
  changedAt DateTime @default(now())
  
  oldData   String?  // JSON
  newData   String   // JSON
  changes   String?  // JSON
}